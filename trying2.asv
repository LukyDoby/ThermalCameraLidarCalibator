%% Backprojection of 2D points to rays in 3D
clear; clc; close all;

load('/home/lukas/ros2_try/bag_processing/only_checkerboard_10_6_24/cameraParams.mat');
intrinsic = params.Intrinsics;
extrinsic = params.PatternExtrinsics;

imagePath = fullfile("/home/lukas/ros2_try/bag_processing/only_checkerboard_10_6_24/Images/");

idx = 1;
R = extrinsic(idx,1).R;
t = extrinsic(idx,1).Translation;
t = t';
K = intrinsic.K;
% only images 1, 100, 200 png

im = imread(fullfile(imagePath,"0001.png"));
imgePoints = detectCheckerboardPoints(im);

% Normal vector in world coordinates (XY-plane normal)
normal_world = [0; 0; 1];

% Compute normal vector in camera coordinates (apply rotation)
n_camera = R * normal_world;

% Compute plane offset in camera coordinates (distance from camera to plane)
d_camera = dot(n_camera, t);  % t is the translation from world to camera

% Create a grid of points for the XY-plane in camera coordinates
[X, Y] = meshgrid(-500:10:0, -400:10:0);  % Adjust grid limits as needed

% Compute Z values based on the plane equation (solve for Z in camera frame)
Z = (d_camera - n_camera(1)*X - n_camera(2)*Y) / n_camera(3);

% % Plot the plane in the camera coordinate system
% Step 1: Back-project the image point to normalized coordinates
% normalized_point (3x1) = K^-1 (3x3) * imgPoint (3x1)
imgPoint = imgePoints(1,:);
imgPoint = [imgPoint'; 1];
normalized_point = K \ imgPoint;
% normalized_point = [0; 0; 1] in this example

% Step 2: Transform the normalized point to camera coordinates
% ray_dir (3x1) = R' (3x3) * (normalized_point (3x1) - t (3x1))
ray_dir = R * (normalized_point - t);
% ray_dir = [0; 0; 0] in this example (since image point is exactly at the center)

% Step 3: Compute the camera center in world coordinates
% C (3x1) = -R' * t (3x1)
C = -R' * t;
% C = [0; 0; -1] (camera is 1 unit behind the origin)

% Step 4: Compute the intersection of the ray with the plane
% lambda (scalar) = (d - dot(n, C)) / dot(n, ray_dir)
lambda = (d_camera - dot(n_camera', C)) / dot(n_camera', ray_dir);
% lambda computation may result in infinity if ray_dir = [0; 0; 0], in practice, ray_dir should be non-zero.

% Step 5: Compute the 3D intersection point
% X_intersect (3x1) = C (3x1) + lambda * ray_dir (3x1)
X_intersect = C + lambda * ray_dir;

figure;
showExtrinsics(params);
hold on;
plot3(X_intersect(1),X_intersect(3),X_intersect(2), 'r+')